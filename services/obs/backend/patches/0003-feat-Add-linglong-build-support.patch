From 5e5aadcbb78bb96ac7a251b613a137c48bffa10c Mon Sep 17 00:00:00 2001
From: wurongjie <wurongjie@deepin.org>
Date: Wed, 15 Mar 2023 17:19:59 +0800
Subject: [PATCH 3/3] feat: Add linglong build support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

支持使用linglong.yaml文件构建玲珑项目,并封装为deb包

Log:
---
 Build.pm              |  9 ++++-
 Build/Linglong.pm     | 86 +++++++++++++++++++++++++++++++++++++++++++
 PBuild/Recipe.pm      |  3 +-
 build-recipe          |  6 ++-
 build-recipe-linglong | 60 ++++++++++++++++++++++++++++++
 5 files changed, 160 insertions(+), 4 deletions(-)
 create mode 100644 Build/Linglong.pm
 create mode 100644 build-recipe-linglong

diff --git a/Build.pm b/Build.pm
index b5102ba..6aafc44 100644
--- a/Build.pm
+++ b/Build.pm
@@ -44,6 +44,7 @@ our $do_fissile;
 our $do_helm;
 our $do_flatpak;
 our $do_mkosi;
+our $do_linglong;
 
 sub import {
   for (@_) {
@@ -60,8 +61,9 @@ sub import {
     $do_helm = 1 if $_ eq ':helm';
     $do_flatpak = 1 if $_ eq ':flatpak';
     $do_mkosi = 1 if $_ eq ':mkosi';
+    $do_linglong = 1 if $_ eq ':linglong';
   }
-  $do_rpm = $do_deb = $do_kiwi = $do_arch = $do_collax = $do_livebuild = $do_snapcraft = $do_appimage = $do_docker = $do_fissile = $do_helm = $do_flatpak = $do_mkosi = 1 if !$do_rpm && !$do_deb && !$do_kiwi && !$do_arch && !$do_collax && !$do_livebuild && !$do_snapcraft && !$do_appimage && !$do_docker && !$do_fissile && !$do_helm && !$do_flatpak && !$do_mkosi;
+  $do_rpm = $do_deb = $do_kiwi = $do_arch = $do_collax = $do_livebuild = $do_snapcraft = $do_appimage = $do_docker = $do_fissile = $do_helm = $do_flatpak = $do_mkosi = $do_linglong = 1 if !$do_rpm && !$do_deb && !$do_kiwi && !$do_arch && !$do_collax && !$do_livebuild && !$do_snapcraft && !$do_appimage && !$do_docker && !$do_fissile && !$do_helm && !$do_flatpak && !$do_mkosi && !$do_linglong;
 
   if ($do_deb) {
     require Build::Deb;
@@ -99,6 +101,9 @@ sub import {
   if ($do_mkosi) {
     require Build::Mkosi;
   }
+  if ($do_linglong) {
+    require Build::Linglong;
+  }
 }
 
 package Build::Features;
@@ -1274,6 +1279,7 @@ sub recipe2buildtype {
   return 'dsc' if $recipe eq 'debian.control';
   return 'dsc' if $recipe eq 'control' && $_[0] =~ /(?:^|\/)debian\/[^\/]+$/s;
   return 'mkosi' if $recipe =~ m/^mkosi\./;
+  return 'linglong' if $recipe eq 'linglong.yaml';
   return undef;
 }
 
@@ -1337,6 +1343,7 @@ sub parse_typed {
   return Build::Helm::parse($cf, $fn, @args) if $buildtype eq 'helm';
   return Build::Flatpak::parse($cf, $fn, @args) if $buildtype eq 'flatpak';
   return Build::Mkosi::parse($cf, $fn, @args) if $do_mkosi && $buildtype eq 'mkosi';
+  return Build::Linglong::parse($cf, $fn, @args) if $do_linglong && $buildtype eq 'linglong';
   return undef;
 }
 
diff --git a/Build/Linglong.pm b/Build/Linglong.pm
new file mode 100644
index 0000000..528ac1c
--- /dev/null
+++ b/Build/Linglong.pm
@@ -0,0 +1,86 @@
+################################################################
+#
+# Copyright (c) 2011-2023 Wuhan Deepin Technology Co., Ltd. 
+# Author: myml <wurongjie@deepin.org>
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 2 or 3 as
+# published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program (see the file COPYING); if not, write to the
+# Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
+#
+################################################################
+
+package Build::Linglong;
+
+use strict;
+
+eval { require YAML::XS; $YAML::XS::LoadBlessed = 0; };
+*YAML::XS::LoadFile = sub {die("YAML::XS is not available\n")} unless defined &YAML::XS::LoadFile;
+
+sub toDepth {
+  my($package) = @_;
+  my $id = $package->{'id'};
+  my $version = $package->{'version'};
+  # 判断是否将包名和版本号写一起的简写模式，如 org.deepin.base/20.5.12
+  my @spl = split('/', $package->{'id'});
+  if(scalar(@spl)>1) {
+    $id = $spl[0];
+    $version = $spl[1];
+  }
+  # debian 包名不支持大写，转为小写字符
+  $id = lc($id);
+  # 如果版本号小余四位，转为范围限制 
+  # 如 org.deepin.base/20.5.12 会转为 linglong.org.deepin.base (>= 20.5.12), linglong.org.deepin.base (< 20.5.13)
+  my @vs = split('\.', $version);
+  if(scalar(@vs) < 4) {
+    my $min = $version;
+    $vs[-1] = $vs[-1]+1;
+    my $max = join('.', @vs);
+    return 'linglong.'.$id.' (>= '.$min.'), '.'linglong.'.$id.' (<< '.$max.')'
+  }
+  # 版本号是四位，则使用固定限制
+  return 'linglong.'.$id.' (= '.$version.')'
+}
+
+sub parse {
+  my ($cf, $fn) = @_;
+  
+  my $yml;
+  eval { $yml = YAML::XS::LoadFile($fn); };
+  return {'error' => "Failed to parse yml file"} unless $yml;
+  my $ret = {};
+  $ret->{'name'} = $yml->{'package'}->{'id'};
+  $ret->{'version'} = $yml->{'package'}->{'version'} || "0";
+
+  my @packdeps;
+  if($yml->{'runtime'}) {
+    push @packdeps, toDepth($yml->{'runtime'}); 
+  }
+
+  if($yml->{'base'}) {
+    push @packdeps, toDepth($yml->{'base'});
+  }
+  
+  if($yml->{'depends'}) {
+    for my $depend (@{$yml->{'depends'}}) {
+      push @packdeps, toDepth($depend);
+    }
+  }
+
+  $ret->{'deps'} = \@packdeps;
+
+  my @sources;
+  $ret->{'sources'} = \@sources;
+   
+  return $ret;
+}
+
+1;
diff --git a/PBuild/Recipe.pm b/PBuild/Recipe.pm
index b18aafa..b48bbba 100644
--- a/PBuild/Recipe.pm
+++ b/PBuild/Recipe.pm
@@ -38,6 +38,7 @@ sub find_recipe {
   return $files{'simpleimage'} if $files{'simpleimage'};
   return $files{'snapcraft.yaml'} if $type eq 'snapcraft' && $files{'snapcraft.yaml'};
   return $files{'appimage.yml'} if $type eq 'appimage' && $files{'appimage.yml'};
+  return $files{'linglong.yaml'} if $type eq 'linglong' && $files{'linglong.yaml'};
   return $files{'Dockerfile'} if $type eq 'docker' && $files{'Dockerfile'};
   return $files{'fissile.yml'} if $type eq 'fissile' && $files{'fissile.yml'};
   return $files{'Chart.yaml'} if $type eq 'helm' && $files{'Chart.yaml'};
@@ -203,7 +204,7 @@ sub looks_like_packagedir {
   for my $file (@files) {
     return 1 if $file =~ /\.(?:spec|dsc|kiwi)$/;
     return 1 if $file =~ /^mkosi\./;
-    return 1 if $file eq 'snapcraft.yaml' || $file eq 'appimage.yml';
+    return 1 if $file eq 'snapcraft.yaml' || $file eq 'appimage.yml' || $file eq 'linglong.yaml';
     return 1 if $file eq 'Dockerfile' || $file eq 'fissile.yml' || $file eq 'Chart.yml';
     return 1 if $file eq 'PKGBUILD';
   }
diff --git a/build-recipe b/build-recipe
index 753faa4..5bee63b 100644
--- a/build-recipe
+++ b/build-recipe
@@ -29,7 +29,7 @@ RPM_BUILD_IN_PLACE=
 RPM_RECIPE_IN_SUBDIR=
 RPM_NOPREP=
 
-for i in spec dsc kiwi arch collax preinstallimage simpleimage mock livebuild snapcraft debootstrap debbuild appimage docker podman fissile helm flatpak mkosi; do
+for i in spec dsc kiwi arch collax preinstallimage simpleimage mock livebuild snapcraft debootstrap debbuild appimage docker podman fissile helm flatpak mkosi linglong; do
     . "$BUILD_DIR/build-recipe-$i"
 done
 
@@ -113,6 +113,7 @@ recipe_set_buildtype() {
         debian.control) BUILDTYPE=dsc ;;
         debian/control) BUILDTYPE=dsc ;;
         mkosi.*) BUILDTYPE=mkosi ;;
+        linglong.yaml) BUILDTYPE=linglong ;;
     esac
     if test -z "$BUILDTYPE" ; then
        cleanup_and_exit 1 "I don't know how to build $RECIPEFILE"
@@ -166,7 +167,7 @@ expand_recipe_directories() {
 			mkosi) types="mkosi." ;;
 		    esac
 		fi
-		types="$types .spec _specsubdir:package _specsubdir:dist .dsc PKGBUILD Dockerfile build.collax .kiwi .src.rpm .nosrc.rpm simpleimage snapcraft.yaml Chart.yaml flatpak.yaml flatpak.json mkosi."
+		types="$types .spec _specsubdir:package _specsubdir:dist .dsc PKGBUILD Dockerfile build.collax .kiwi .src.rpm .nosrc.rpm simpleimage snapcraft.yaml Chart.yaml flatpak.yaml flatpak.json mkosi. linglong.yaml"
 	    fi
 	    for t in $types ; do
 		found=
@@ -267,6 +268,7 @@ recipe_needs_build_binaries() {
     test "$BUILDTYPE" = fissile && return 0
     test "$BUILDTYPE" = podman && return 0
     test "$BUILDTYPE" = mkosi && return 0
+    test "$BUILDTYPE" = linglong && return 0
     test "$BUILDTYPE" = preinstallimage && return 1
     grep -E '^#[[:blank:]]*needsbinariesforbuild[[:blank:]]*$' >/dev/null <"$1" && return 0
     return 1
diff --git a/build-recipe-linglong b/build-recipe-linglong
new file mode 100644
index 0000000..73adfb1
--- /dev/null
+++ b/build-recipe-linglong
@@ -0,0 +1,60 @@
+################################################################
+#
+# Copyright (c) 2011-2023 Wuhan Deepin Technology Co., Ltd. 
+# Author: myml <wurongjie@deepin.org>
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 2 or 3 as
+# published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program (see the file COPYING); if not, write to the
+# Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
+#
+################################################################
+
+
+recipe_setup_linglong() {
+    echo "setup linglong" $BUILD_ROOT
+    # Copy from build-recipe-appimage
+    TOPDIR=/usr/src/packages
+    "$DO_INIT_TOPDIR" && rm -rf "$BUILD_ROOT$TOPDIR"
+    for i in OTHER SOURCES DEBS ; do
+	    mkdir -p "$BUILD_ROOT$TOPDIR/$i"
+    done
+    if test "$MYSRCDIR" = $BUILD_ROOT/.build-srcdir ; then
+	    mv "$MYSRCDIR"/* $BUILD_ROOT$TOPDIR/SOURCES/
+    else
+	    copy_sources "$MYSRCDIR" "$BUILD_ROOT$TOPDIR/SOURCES/"
+    fi
+    chown -hR "$ABUILD_UID:$ABUILD_GID" "$BUILD_ROOT$TOPDIR"
+    # init linglong repo
+    mkdir -p /home/$BUILD_USER/.cache/linglong-builder
+    mv /var/cache/linglong/repo /home/$BUILD_USER/.cache/linglong-builder/
+    chown -hR "$ABUILD_UID:$ABUILD_GID" /home/$BUILD_USER/.cache/linglong-builder
+}
+
+recipe_prepare_linglong() {
+    :
+}
+
+recipe_build_linglong() {
+    echo "build linglong"
+    su -c 'tar --no-same-owner -xf "git_source.tar.zst"' $BUILD_USER
+    su -c '/usr/bin/ll-builder build --offline' $BUILD_USER || cleanup_and_exit 1
+    su -c 'bash deb.bash' $BUILD_USER || cleanup_and_exit 1
+    BUILD_SUCCEEDED=true
+}
+
+recipe_resultdirs_linglong() {
+    echo DEBS
+}
+
+recipe_cleanup_linglong() {
+    :
+}
-- 
2.20.1

